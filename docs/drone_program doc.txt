# Drone Control and Telemetry System

This project comprises several Python modules that together facilitate control and telemetry for drones using MAVLink over a serial connection. It's designed to run on a Raspberry Pi or similar device connected to a drone via serial interfaces.

## Modules

### drone_handler.py

The main entry point of the application, responsible for initializing the drone connection, handling commands, and managing telemetry services.

- **Key Functions**:
  - `main()`: Initializes the connection to the drone and starts the telemetry service.
  - `process_command(command, hardware_interface)`: Processes incoming commands to control the drone's hardware components.

### hardware_interface.py

Defines the `HardwareInterface` class, which provides methods to directly interact with the drone's hardware, like setting flight modes or controlling the camera.

- **Key Functions**:
  - `set_flight_mode(mode_name)`: Sets the drone's flight mode.
  - `control_camera(tilt, pan)`: Adjusts the camera's tilt and pan.

### sensor_handling.py

Contains the `SensorHandler` class for accessing drone sensor data such as location, altitude, and battery status.

- **Key Functions**:
  - `get_location()`: Returns the drone's current location.
  - `get_altitude()`: Returns the drone's current altitude.

### telemetry_service.py

Implements the `TelemetryService` class, a threaded service for regularly updating and logging telemetry data.

- **Key Functions**:
  - `run()`: The main loop of the thread, which periodically updates telemetry data.
  - `get_telemetry()`: Returns the latest collected telemetry data.

## Configuration

The system uses a `config.ini` file to manage settings such as log directories and serial connection parameters.

- **Sample config.ini**:
  ```ini
  [General]
  LogsDir=/path/to/logs

  [Connection]
  VehicleConnectionString=/dev/serial0
  VehicleBaudRate=57600
  GroundStationSerialPort=/dev/ttyUSB0
  GroundStationBaudRate=57600
